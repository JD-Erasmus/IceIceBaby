@model IceIceBaby.Models.DTOs.CreateOrderDto
@{
    ViewData["Title"] = "Create Order";
    var customers = ViewBag.Customers as List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> ?? new();
    var products = ViewBag.Products as List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem> ?? new();
}

<section class="mb-4">
    <h1 class="page-title mb-1">New customer order</h1>
    <p class="text-muted mb-0">Capture order details, promised delivery, and the line items requested.</p>
</section>

<form asp-action="Create" method="post" class="card border-0 shadow-soft p-4">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row g-3">
        <div class="col-md-6">
            <label asp-for="CustomerId" class="form-label">Customer</label>
            <select asp-for="CustomerId" class="form-select" asp-items="customers"></select>
            <span asp-validation-for="CustomerId" class="text-danger"></span>
        </div>
        <div class="col-md-3">
            <label asp-for="DeliveryType" class="form-label">Delivery Type</label>
            <select asp-for="DeliveryType" class="form-select" asp-items="Html.GetEnumSelectList<IceIceBaby.Models.DeliveryType>()"></select>
        </div>
        <div class="col-md-3">
            <label asp-for="PromisedAt" class="form-label">Promised</label>
            <input asp-for="PromisedAt" class="form-control" type="datetime-local" />
        </div>
    </div>
    <div class="mt-3">
        <label asp-for="Notes" class="form-label">Notes</label>
        <textarea asp-for="Notes" class="form-control" rows="2" placeholder="Optional instructions"></textarea>
    </div>

    <hr class="my-4" />
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0">Items</h5>
        <button type="button" id="add-line" class="btn btn-outline-primary">Add Item</button>
    </div>
    <div id="lines">
        @for (int i = 0; i < Model.Lines.Count; i++)
        {
            <div class="row g-2 align-items-end mb-3 line-row bg-light rounded-3 p-3">
                <div class="col-lg-7">
                    <label class="form-label">Product</label>
                    <select name="Lines[@i].ProductId" class="form-select">
                        @foreach (var p in products)
                        {
                            <option value="@p.Value" selected="@(Model.Lines[i].ProductId.ToString()==p.Value)">@p.Text</option>
                        }
                    </select>
                </div>
                <div class="col-lg-3">
                    <label class="form-label">Qty</label>
                    <input name="Lines[@i].Qty" class="form-control" value="@Model.Lines[i].Qty" />
                </div>
                <div class="col-lg-2 text-lg-end">
                    <button type="button" class="btn btn-outline-danger remove-line">Remove</button>
                </div>
            </div>
        }
    </div>

    <div class="d-flex flex-wrap gap-2 mt-4">
        <button type="submit" class="btn btn-success">Save Order</button>
        <a class="btn btn-outline-primary" asp-controller="Orders" asp-action="Index">Cancel</a>
    </div>
</form>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const products = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(products.Select(p => new { v = p.Value, t = p.Text })));
            const linesEl = document.getElementById('lines');
            document.getElementById('add-line').addEventListener('click', () => addLine());
            linesEl.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-line')) {
                    e.target.closest('.line-row').remove();
                }
            });
            function addLine() {
                const index = linesEl.querySelectorAll('.line-row').length;
                const row = document.createElement('div');
                row.className = 'row g-2 align-items-end mb-3 line-row bg-light rounded-3 p-3';
                row.innerHTML = `
                    <div class="col-lg-7">
                        <label class="form-label">Product</label>
                        <select name="Lines[${index}].ProductId" class="form-select">
                            ${products.map(p => `<option value="${p.v}">${p.t}</option>`).join('')}
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <label class="form-label">Qty</label>
                        <input name="Lines[${index}].Qty" class="form-control" value="1" />
                    </div>
                    <div class="col-lg-2 text-lg-end">
                        <button type="button" class="btn btn-outline-danger remove-line">Remove</button>
                    </div>`;
                linesEl.appendChild(row);
            }
        })();
    </script>
}
